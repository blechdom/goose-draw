{"ast":null,"code":"import _objectSpread from \"/home/blech/Dev/aws-amplify-appsync-graphql-real-time-canvas/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/blech/Dev/aws-amplify-appsync-graphql-real-time-canvas/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/blech/Dev/aws-amplify-appsync-graphql-real-time-canvas/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/blech/Dev/aws-amplify-appsync-graphql-real-time-canvas/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/blech/Dev/aws-amplify-appsync-graphql-real-time-canvas/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/blech/Dev/aws-amplify-appsync-graphql-real-time-canvas/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/blech/Dev/aws-amplify-appsync-graphql-real-time-canvas/src/Canvas.js\";\nimport React, { Component } from \"react\";\nimport CanvasDraw from \"./RCD\";\nimport uuid from 'uuid/v4';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { onUpdateCanvas } from './graphql/subscriptions';\nimport { updateCanvas, createCanvas } from './graphql/mutations';\nvar colors = ['#D50000', '#AA00FF', '#2962FF', '#18FFFF', '#00C853', '#FFD600', '#FF6D00', '#000000'];\n\nfunction rand() {\n  return colors[~~(colors.length * Math.random())];\n}\n\nvar Demo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Demo, _Component);\n\n  function Demo() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Demo);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Demo)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      brushColor: rand(),\n      canvasHeight: 350,\n      canvasWidth: 380,\n      brushRadius: 4,\n      lazyRadius: 8\n    };\n    _this.lineLength = 0;\n    _this.id = '123';\n    _this.clientId = uuid();\n    _this.canvasInfo = 'tempcanvas';\n\n    _this.clear = function () {\n      var data = _this.canvas.getSaveData();\n\n      var parsedData = JSON.parse(data);\n\n      var newData = _objectSpread({}, parsedData, {\n        lines: []\n      });\n\n      var newCanvas = JSON.stringify(newData);\n\n      _this.canvas.loadSaveData(newCanvas);\n\n      var canvas = {\n        id: _this.id,\n        clientId: _this.clientId,\n        data: newCanvas\n      };\n      API.graphql(graphqlOperation(updateCanvas, {\n        input: canvas\n      })).then(function (c) {\n        console.log('canvas cleared!');\n      }).catch(function (err) {\n        return console.log('error creating: ', err);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Demo, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var canvas = {\n        id: this.id,\n        clientId: this.clientId,\n        data: _objectSpread({}, this.state, {\n          lines: []\n        }) // Create the canvas. If canvas is already created, retrieve the data & draw previous canvas\n\n      };\n      API.graphql(graphqlOperation(createCanvas, {\n        input: canvas\n      })).then(function (d) {\n        return console.log('canvas created :', d);\n      }).catch(function (err) {\n        if (err.errors[0].data.id === _this2.id) {\n          var d = err.errors[0].data.data;\n\n          _this2.canvas.loadSaveData(d);\n        }\n      });\n      window.addEventListener('mouseup', function (e) {\n        // If we are clicking on a button, do not update anything\n        if (e.target.name === 'clearbutton') return;\n\n        _this2.setState({\n          brushColor: rand()\n        });\n\n        var data = _this2.canvas.getSaveData();\n\n        var p = JSON.parse(data);\n        var length = p.lines.length;\n        _this2.lineLength = length;\n        var canvas = {\n          id: _this2.id,\n          clientId: _this2.clientId,\n          data: data // Save updated canvas in the database\n\n        };\n        API.graphql(graphqlOperation(updateCanvas, {\n          input: canvas\n        })).then(function (c) {\n          console.log('canvas updated!');\n        }).catch(function (err) {\n          return console.log('error creating: ', err);\n        });\n      });\n      API.graphql(graphqlOperation(onUpdateCanvas)).subscribe({\n        next: function next(d) {\n          var data = JSON.parse(d.value.data.onUpdateCanvas.data);\n          var length = data.lines.length;\n\n          if (length === 0) {\n            // If there is no canvas data, clear the canvas\n            var _data = _this2.canvas.getSaveData();\n\n            var parsedData = JSON.parse(_data);\n\n            var newData = _objectSpread({}, parsedData, {\n              lines: []\n            });\n\n            var newCanvas = JSON.stringify(newData);\n\n            _this2.canvas.loadSaveData(newCanvas);\n\n            return;\n          }\n\n          if (_this2.lineLength === length || length === Number(0)) return; // Draw new lines to canvas\n\n          var last = data.lines[length - 1];\n\n          _this2.canvas.simulateDrawingLines({\n            lines: [last]\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        name: \"clearbutton\",\n        onClick: this.clear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Clear\"), React.createElement(CanvasDraw, Object.assign({}, this.state, {\n        ref: function ref(canvas) {\n          return _this3.canvas = canvas;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Demo;\n}(Component);\n\nexport default Demo;","map":{"version":3,"sources":["/home/blech/Dev/aws-amplify-appsync-graphql-real-time-canvas/src/Canvas.js"],"names":["React","Component","CanvasDraw","uuid","API","graphqlOperation","onUpdateCanvas","updateCanvas","createCanvas","colors","rand","length","Math","random","Demo","state","brushColor","canvasHeight","canvasWidth","brushRadius","lazyRadius","lineLength","id","clientId","canvasInfo","clear","data","canvas","getSaveData","parsedData","JSON","parse","newData","lines","newCanvas","stringify","loadSaveData","graphql","input","then","c","console","log","catch","err","d","errors","window","addEventListener","e","target","name","setState","p","subscribe","next","value","Number","last","simulateDrawingLines"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport CanvasDraw from \"./RCD\";\nimport uuid from 'uuid/v4'\n\nimport { API, graphqlOperation } from 'aws-amplify'\nimport { onUpdateCanvas } from './graphql/subscriptions'\nimport { updateCanvas, createCanvas } from './graphql/mutations'\n\nconst colors = [\n  '#D50000',\n  '#AA00FF',\n  '#2962FF',\n  '#18FFFF',\n  '#00C853',\n  '#FFD600',\n  '#FF6D00',\n  '#000000'\n]\n\nfunction rand() {\n  return colors[~~(colors.length * Math.random())];\n}\n\nclass Demo extends Component {\n  state = {\n    brushColor: rand(),\n    canvasHeight: 350,\n    canvasWidth: 380,\n    brushRadius: 4,\n    lazyRadius: 8\n  }\n  lineLength = 0\n  id = '123'\n  clientId = uuid()\n  canvasInfo = 'tempcanvas'\n  componentDidMount() {\n    const canvas = {\n      id: this.id,\n      clientId: this.clientId,\n      data: {\n        ...this.state,\n        lines: []\n      }\n    }\n    // Create the canvas. If canvas is already created, retrieve the data & draw previous canvas\n    API.graphql(graphqlOperation(createCanvas, { input: canvas }))\n      .then(d => console.log('canvas created :', d))\n      .catch(err => {\n        if (err.errors[0].data.id === this.id) {\n          const d = err.errors[0].data.data\n          this.canvas.loadSaveData(d)\n        }\n      })\n    window.addEventListener('mouseup', (e) => {\n      // If we are clicking on a button, do not update anything\n      if (e.target.name === 'clearbutton') return \n      this.setState({\n        brushColor: rand()\n      })\n      const data = this.canvas.getSaveData()\n      const p = JSON.parse(data)\n      const length = p.lines.length\n      this.lineLength = length\n\n      const canvas = {\n        id: this.id,\n        clientId: this.clientId,\n        data\n      }\n      // Save updated canvas in the database\n      API.graphql(graphqlOperation(updateCanvas, { input: canvas }))\n        .then(c => {\n          console.log('canvas updated!')\n        })\n        .catch(err => console.log('error creating: ', err))\n    })\n    API.graphql(graphqlOperation(onUpdateCanvas))\n      .subscribe({\n        next: (d) => {\n          const data = JSON.parse(d.value.data.onUpdateCanvas.data)\n          const length = data.lines.length\n          if (length === 0) {\n            // If there is no canvas data, clear the canvas\n            const data = this.canvas.getSaveData()\n            const parsedData = JSON.parse(data)\n            const newData = {\n              ...parsedData,\n              lines: []\n            }\n            const newCanvas = JSON.stringify(newData)\n            this.canvas.loadSaveData(newCanvas)\n            return\n          }\n          if (this.lineLength === length || length === Number(0)) return\n          // Draw new lines to canvas\n          const last = data.lines[length -1]\n          this.canvas.simulateDrawingLines({ lines: [last] })\n        }\n      })\n  }\n  clear = () => {\n    const data = this.canvas.getSaveData()\n    const parsedData = JSON.parse(data)\n    const newData = {\n      ...parsedData,\n      lines: []\n    }\n    const newCanvas = JSON.stringify(newData)\n    this.canvas.loadSaveData(newCanvas)\n    const canvas = {\n      id: this.id,\n      clientId: this.clientId,\n      data: newCanvas\n    }\n    API.graphql(graphqlOperation(updateCanvas, { input: canvas }))\n        .then(c => {\n          console.log('canvas cleared!')\n        })\n        .catch(err => console.log('error creating: ', err))\n  }\n  render() {\n    return (\n      <div>\n        <button name='clearbutton' onClick={this.clear}>Clear</button>\n        <CanvasDraw\n          {...this.state}\n          ref={canvas => this.canvas = canvas}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Demo"]},"metadata":{},"sourceType":"module"}